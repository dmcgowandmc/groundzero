---
#Create the ec2 instances
- name: 'Create the Basition host. Use as a staging point for maintenance and administration'
  ec2:
    region: "{{ ec2_cfg.region }}"
    instance_tags: "{{ ec2_cfg.inst_1.tags }}"
    exact_count: 1
    count_tag: "{{ ec2_cfg.inst_1.tags }}"
    vpc_subnet_id: "{{ vpc_pri_subnet }}"
    key_name: "{{ ec2_cfg.keypair_1.name }}"
    group_id: "{{ sg_ssh_ext.group_id }},{{ sg_management.group_id }},{{ sg_inout_common.group_id }}" #eventually want this as some sort of loop. But for these servers it can remain static
    instance_type: "{{ ec2_cfg.inst_common.small_inst_type }}"
    image: "{{ ec2_cfg.inst_common.image }}"
    volumes:
      - device_name: "{{ ec2_cfg.inst_common.small_drive_type.device_name }}"
        device_type: "{{ ec2_cfg.inst_common.small_drive_type.device_type }}"
        volume_size: "{{ ec2_cfg.inst_common.small_drive_type.volume_size }}"
        delete_on_termination: true
    wait: yes
  register: ec2_bastion
- name: 'Acquire elastic IP and assign to bastion host. This is required for external access into network'
  ec2_eip.py: #Specifically using the 2.0 version of ec2_eip. File exists in library directory
    region: "{{ ec2_cfg.region }}"
    in_vpc: true
    reuse_existing_ip_allowed: true
    device_id: "{{ ec2_bastion.tagged_instances[0].id }}"
  register: ec2_bastion_eip
- name: 'Create the management host. Hosts the primary ansible scripts for maintenance of the environment'
  ec2:
    region: "{{ ec2_cfg.region }}"
    instance_tags: "{{ ec2_cfg.inst_2.tags }}"
    exact_count: 1
    count_tag: "{{ ec2_cfg.inst_2.tags }}"
    vpc_subnet_id: "{{ vpc_pri_subnet }}"
    key_name: "{{ ec2_cfg.keypair_2.name }}"
    group_id: "{{ sg_ssh_ext.group_id }},{{ sg_management.group_id }},{{ sg_inout_common.group_id }}" #eventually want this as some sort of loop. But for these servers it can remain static
    instance_type: "{{ ec2_cfg.inst_common.small_inst_type }}"
    image: "{{ ec2_cfg.inst_common.image }}"
    volumes:
      - device_name: "{{ ec2_cfg.inst_common.small_drive_type.device_name }}"
        device_type: "{{ ec2_cfg.inst_common.small_drive_type.device_type }}"
        volume_size: "{{ ec2_cfg.inst_common.small_drive_type.volume_size }}"
        delete_on_termination: true
    wait: yes
  register: ec2_management
- name: 'Acquire elastic IP and assign to management host. This is required for external access into network'
  ec2_eip.py: #Specifically using the 2.0 version of ec2_eip. File exists in library directory
    region: "{{ ec2_cfg.region }}"
    in_vpc: true
    reuse_existing_ip_allowed: true
    device_id: "{{ ec2_management.tagged_instances[0].id }}"
  register: ec2_management_eip
- name: 'In the event this is a rerun, we need to reassign {{ vpc_cfg.sg_ssh_ext.description }} to the management server'
  ec2_group_change.sh:
    region: "{{ vpc.vpc.region }}"
    instance: "{{ ec2_management.tagged_instances[0].id }}"
    group_id: "{{ sg_ssh_ext.group_id }},{{ sg_management.group_id }},{{ sg_inout_common.group_id }}"
  when: ec2_management.changed == false
